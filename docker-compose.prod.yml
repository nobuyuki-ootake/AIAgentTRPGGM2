version: '3.8'

services:
  # プロキシサーバー（本番）
  proxy-server:
    build:
      context: .
      dockerfile: Dockerfile.proxy-server
      target: production
    container_name: ai-trpg-proxy-prod
    restart: unless-stopped
    ports:
      - "4001:4001"
    volumes:
      - ./data:/app/data
      - ./backup:/app/backup
      - ./litestream.yml:/app/litestream.yml:ro
    environment:
      - NODE_ENV=production
      - PORT=4001
      - DATABASE_PATH=/app/data/trpg.db
      - LITESTREAM_S3_BUCKET=${LITESTREAM_S3_BUCKET}
      - LITESTREAM_S3_REGION=${LITESTREAM_S3_REGION}
      - LITESTREAM_S3_ACCESS_KEY_ID=${LITESTREAM_S3_ACCESS_KEY_ID}
      - LITESTREAM_S3_SECRET_ACCESS_KEY=${LITESTREAM_S3_SECRET_ACCESS_KEY}
      - LITESTREAM_S3_ENDPOINT=${LITESTREAM_S3_ENDPOINT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-trpg-network

  # フロントエンド（本番）
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: ai-trpg-frontend-prod
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:4001
    depends_on:
      - proxy-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-trpg-network

  # Redis（キャッシュ・セッション管理）
  redis:
    image: redis:7-alpine
    container_name: ai-trpg-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-trpg-network

  # Nginx（リバースプロキシ・SSL終端）
  nginx:
    image: nginx:alpine
    container_name: ai-trpg-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - proxy-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-trpg-network

  # 監視・メトリクス収集
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-trpg-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-trpg-network

  # Grafana（監視ダッシュボード）
  grafana:
    image: grafana/grafana:latest
    container_name: ai-trpg-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - ai-trpg-network

  # ログ集約
  loki:
    image: grafana/loki:latest
    container_name: ai-trpg-loki-prod
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - ai-trpg-network

  # 定期バックアップ
  backup:
    image: alpine/curl:latest
    container_name: ai-trpg-backup-prod
    restart: "no"
    volumes:
      - ./backup:/backup
      - ./scripts:/scripts:ro
    command: /scripts/backup-cron.sh
    depends_on:
      - proxy-server
    networks:
      - ai-trpg-network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  ai-trpg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16