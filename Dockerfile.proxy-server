FROM node:18-bullseye-slim

# Install build dependencies for better-sqlite3 and Litestream
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    sqlite3 \
    libsqlite3-dev \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Litestream
RUN curl -sf https://litestream.io/install.sh | sh

# Install pnpm globally
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package.json pnpm-workspace.yaml pnpm-lock.yaml ./
COPY packages/types/package.json ./packages/types/
COPY apps/proxy-server/package.json ./apps/proxy-server/

# Install dependencies with native compilation
RUN pnpm install --frozen-lockfile

# Force rebuild better-sqlite3 for the current architecture
RUN cd apps/proxy-server && pnpm rebuild better-sqlite3

# Copy source code
COPY . .

# Build types package first
RUN cd packages/types && pnpm build

# Create data and backup directories
RUN mkdir -p /app/data /app/backup

# Copy Litestream configuration
COPY litestream.yml /app/litestream.yml

# Set working directory to proxy-server
WORKDIR /app/apps/proxy-server

# Expose port
EXPOSE 4001

# Copy entrypoint script
COPY scripts/docker-entrypoint.sh /app/docker-entrypoint.sh
RUN chmod +x /app/docker-entrypoint.sh

# Multi-stage build for production
FROM node:18-bullseye-slim AS production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Litestream
RUN curl -sf https://litestream.io/install.sh | sh

# Copy built application
COPY --from=0 /app /app

# Create non-root user
RUN groupadd -g 1001 appuser && \
    useradd -r -u 1001 -g appuser appuser && \
    chown -R appuser:appuser /app && \
    chmod +x /app/docker-entrypoint.sh

# Switch to non-root user
USER appuser

# Set working directory
WORKDIR /app/apps/proxy-server

# Expose port
EXPOSE 4001

# Development/Production conditional start
CMD ["/app/docker-entrypoint.sh"]